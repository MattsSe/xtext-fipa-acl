@Ecore(nsPrefix="acl", nsURI="http://www.tum.de/ais/acl/Acl")
@GenModel(bundleManifest="false", modelDirectory="de.tum.ais.alc.model/src/main/src-gen", updateClasspath="false",
	complianceLevel="8.0")
package de.tum.ais.acl

import java.net.URI
import javax.xml.datatype.XMLGregorianCalendar

type DateTime wraps XMLGregorianCalendar

type URI wraps URI

class AclMessage {
	MessageType messageType
	contains MessageParameter[] messageParameters
}

interface MessageParameter {
	 op String getIdentifier()
}

/* 
enum MessageParameterType {
	userdefined
	sender = 1
	reciever = 2
	content = 2
	reply-with = 3
	reciever = 4
	reciever = 5
	reciever = 6
	reciever = 7
	reciever = 8
	reciever = 9
	reciever = 10
	reciever = 11
	reciever = 12
}
* */

class SenderMessageParameter extends MessageParameter {
	unsettable String intendifier = "sender"
	contains AgentIdentifier agentIdentifier
}

class RecieverMessageParameter extends MessageParameter {
	unsettable String intendifier = "reciever"
	contains AgentIdentifier[] agentIdentifiers
}

class ContentMessageParameter extends MessageParameter {
	unsettable String intendifier = "content"
	String content
}

interface ExpressionMessageParameter extends MessageParameter {
	contains Expression expression
}

class ReplyWithMessageParameter extends ExpressionMessageParameter {
	unsettable String intendifier = "reply-with"
}

class ReplyByMessageParameter extends MessageParameter {
	unsettable String intendifier = "reply-by"
	DateTime dateTime
}

class InReplyToMessageParameter extends ExpressionMessageParameter {
	unsettable String intendifier = "in-reply-to"
}

class ReplyToMessageParameter extends MessageParameter {
	unsettable String intendifier = "reply-to"
	contains AgentIdentifier[] agentIdentifiers
}

class LanguageMessageParameter extends ExpressionMessageParameter {
	unsettable String intendifier = "language"
}

class EncodingMessageParameter extends ExpressionMessageParameter {
	unsettable String intendifier = "encoding"
}

class OntologyMessageParameter extends ExpressionMessageParameter {
	unsettable String intendifier = "ontology"
}

class ConversationIdMessageParameter extends ExpressionMessageParameter {
	unsettable String intendifier = "conversation-id"
}

class UserDefinedMessageParameter extends ExpressionMessageParameter {
	String identifier
}

class ProtocolMessageParameter extends MessageParameter {
	unsettable String intendifier = "protocol"
	String protocol
}

class AgentIdentifier {
	String name
	String[] addresses
	contains Expression[] userDefinedParameter
	contains AgentIdentifier[] resolvers
}

interface Expression {
	op String getStringValue()
}

class StringExpression extends Expression {
	String value
	op String getStringValue() {
		value
	}
}

interface NumberExpression extends Expression {
	op double getNumberValue()
	op String getStringValue() {
		this.getNumberValue().toString
	}
}

class IntegerExpression extends NumberExpression {
	int value
	op double getNumberValue() {
		value
	}
}

class FloatExpression extends NumberExpression {
	double value
	op double getNumberValue() {
		value
	}
}


class NestedExpression extends NumberExpression {
	contains Expression[] expressions
	op String getStringValue() {
		expressions.join(", ")
	}
}

class DateTimeExpression extends Expression {
	DateTime dateTime
	op String getStringValue() {
		dateTime.toString
	}
}

/**
 * @see http://www.fipa.org/specs/fipa00037/SC00037J.pdf
 */
enum MessageType {
	AcceptProposal
	Agree
	Cancel
	CallForProposal
	Confirm
	DisConfirm
	Failure
	Inform
	InformIf
	InformRef
	NotUnderstood
	Propagate
	Propose
	Proxy
	QueryIf
	QueryRef
	Refuse
	RejectProposal
	Request
	RequestWhen
	RequestWhenever
	Subscribe
}
	
