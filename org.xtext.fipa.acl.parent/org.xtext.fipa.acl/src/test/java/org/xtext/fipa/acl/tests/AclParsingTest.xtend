/*
 * generated by Xtext 2.13.0
 */
package org.xtext.fipa.acl.tests

import com.google.inject.Inject
import org.xtext.fipa.acl.AclMessage
import org.xtext.fipa.acl.ContentMessageParameter
import org.xtext.fipa.acl.InReplyToMessageParameter
import org.xtext.fipa.acl.IntegerExpression
import org.xtext.fipa.acl.MessageType
import org.xtext.fipa.acl.SenderMessageParameter
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.Test
import org.junit.runner.RunWith

import static org.junit.Assert.*
import org.xtext.fipa.acl.FloatExpression

@RunWith(XtextRunner)
@InjectWith(AclInjectorProvider)
class AclParsingTest {
	@Inject
	ParseHelper<AclMessage> parseHelper

	@Test def void messageTest() {
		val model = '''
			( request
			 :sender ( agent-identifier :name SenderExample )
			)
		'''
		val msg = parseHelper.parse(model)
		assertEquals(msg.messageType, MessageType.REQUEST)
		assertNotNull(msg)
		assertEquals(1, msg.messageParameters.size)
		val param = msg.messageParameters.head as SenderMessageParameter
		assertEquals("SenderExample", param.agentIdentifier.name)
	}

	@Test def void expressionTest() {
		val model = '''
			( request
			 :in-reply-to 12345
			 :in-reply-to 12.345
			 :content "test-content"
			)
		'''
		val msg = parseHelper.parse(model)
		assertNotNull(msg)
		var param1 = msg.messageParameters.head as InReplyToMessageParameter
		val expression1 = param1.expression as IntegerExpression
		assertEquals(12345, expression1.value)
		param1 = msg.messageParameters.get(1) as InReplyToMessageParameter
		val expression2 = param1.expression as FloatExpression
		assertEquals(12.345, expression2.value, 0)
		val param2 = msg.messageParameters.get(2) as ContentMessageParameter
		assertEquals("test-content", param2.content)
	}
}
